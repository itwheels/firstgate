<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-2.4.0.xsd">

	<!-- JDBC data source which uses oracle -->
	<bean id="pos_ds" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521/orcl" />
		<property name="username" value="NEANDS3" />
		<property name="password" value="edi_123" />
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="100" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="10" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="5" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位),超时后直接清理掉 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!--maxWait: 最大建立连接等待时间以毫秒为单位 -->
		<property name="maxWait" value="10000" />
		<property name="testWhileIdle" value="true" />
		<!-- 线程回收器每隔3600000ms(1h)检查连接池中的空闲连接 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<!-- 接上，空闲的连接在18000000ms(5h)时间内可以不被回收，超过就被移除 -->
		<property name="minEvictableIdleTimeMillis" value="18000000" />
		<!--从数据库连接池中取得连接时，对其的有效性进行检查 -->
		<property name="testOnBorrow" value="true" />

	</bean>
	<bean id="edi_ds" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521/orcl" />
		<property name="username" value="edigate" />
		<property name="password" value="edi_123" />
		<!--maxActive: 最大连接数量 -->
		<property name="maxActive" value="100" />
		<!--minIdle: 最小空闲连接 -->
		<property name="minIdle" value="5" />
		<!--maxIdle: 最大空闲连接 -->
		<property name="maxIdle" value="10" />
		<!--initialSize: 初始化连接 -->
		<property name="initialSize" value="5" />
		<!-- 连接被泄露时是否打印 -->
		<property name="logAbandoned" value="true" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位),超时后直接清理掉 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!--maxWait: 最大建立连接等待时间以毫秒为单位 -->
		<property name="maxWait" value="10000" />
		<property name="testWhileIdle" value="true" />
		<!-- 线程回收器每隔3600000ms(1h)检查连接池中的空闲连接 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<!-- 接上，空闲的连接在18000000ms(5h)时间内可以不被回收，超过就被移除 -->
		<property name="minEvictableIdleTimeMillis" value="18000000" />
		<!--从数据库连接池中取得连接时，对其的有效性进行检查 -->
		<property name="testOnBorrow" value="true" />

	</bean>
	<!-- /JDBC data source which uses oracle -->

	<!-- <bean id="smooks" class="org.milyn.smooks.camel.dataformat.SmooksDataFormat" init-method="start">
	  	<constructor-arg><value>smooks-slsrpt.xml</value></constructor-arg>
	</bean> -->
	
	
	<bean id="debugProc" class="com.itwheel.edigate.processor.DebugProc" />
	
	<!-- invrpt-库存报告接口 -->
	<bean id="prepSqlParamInitInvrptBatchProc" class="com.itwheel.edigate.invrpt.processor.PrepSqlParamInitInvrptBatchProc" />
	<bean id="prepSqlParamInvrptRetailProc" class="com.itwheel.edigate.invrpt.processor.PrepSqlParamInvrptRetailProc" />
	<bean id="prepSqlParamInvrptCloseBatchProc" class="com.itwheel.edigate.invrpt.processor.PrepSqlParamInvrptCloseBatchProc" />
	<bean id="initInvrptProc" class="com.itwheel.edigate.invrpt.processor.InitInvrptProc" />
	<bean id="initInvrptMsgListProc" class="com.itwheel.edigate.invrpt.processor.InitInvrptMsgListProc" />
	<bean id="produceInvrptMsgProc" class="com.itwheel.edigate.invrpt.processor.ProduceInvrptMsgProc" />
	<bean id="assemblyInvrptProc" class="com.itwheel.edigate.invrpt.processor.AssemblyInvrptProc" />
	
	
	<camelContext id="edigate" xmlns="http://camel.apache.org/schema/spring">
		<!-- use Camel property placeholder loaded from the given file -->
		<camel:propertyPlaceholder id="sql"
			location="classpath:sql.properties" />
		<!-- invrpt-库存报告接口 -->
		<camel:route id="invrpt">
			<camel:from uri="quartz://invrptTimer?cron=0/20+*+*+*+*+?" />
			<camel:log message="invrptTimer quartz trigger a event"></camel:log>

			<camel:to uri="sql:{{sql.invrptlastbatch}}?dataSourceRef=edi_ds" />
			<camel:setHeader headerName="invrpt_last_start_dte">
				<camel:simple>${body[0].[start_dte]}</camel:simple>
			</camel:setHeader>
			<camel:setHeader headerName="invrpt_start_dte">
				<camel:simple>${body[0].[sysdate]}</camel:simple>
			</camel:setHeader>
			
			<camel:to uri="sql:{{sql.get_batchid}}?dataSourceRef=edi_ds" />
			<camel:setHeader headerName="invrpt_batch_id">
				<camel:simple>${body[0].[batch_id]}</camel:simple>
			</camel:setHeader>
			
			<camel:bean ref="prepSqlParamInitInvrptBatchProc"></camel:bean>
			<camel:to uri="sql:{{sql.init_batch}}?dataSourceRef=edi_ds" />
			
			<camel:bean ref="prepSqlParamInvrptRetailProc"></camel:bean>
			<camel:to uri="sql:{{sql.invrpt.retail}}?dataSourceRef=pos_ds" />
			<camel:setHeader headerName="invrpt_retail_cont">
				<camel:simple>${header.CamelSqlRowCount}</camel:simple>
			</camel:setHeader>
			
			<camel:choice>
				<camel:when>
					<camel:simple>${header.invrpt_retail_cont} > 0</camel:simple>
					<camel:log message="retail row count =${header.CamelSqlRowCount}"></camel:log>
					<camel:bean ref="initInvrptMsgListProc"></camel:bean>
					<camel:split>
						<camel:simple>${body}</camel:simple>
						<camel:setHeader headerName="invrpt_retail">
							<camel:simple>${body}</camel:simple>
						</camel:setHeader>
						<camel:transform>
							<camel:simple>${body[id]}</camel:simple>
						</camel:transform>
						<camel:to uri="sql:{{sql.invrpt.retailitem}}?dataSourceRef=pos_ds" />
						<camel:bean ref="produceInvrptMsgProc"></camel:bean>
					</camel:split>
					<camel:to uri="sql:{{sql.get_interchangeid}}?dataSourceRef=edi_ds" />
					<camel:setHeader headerName="invrpt_interchange_id">
						<camel:simple>${body[0].[interchange_id]}</camel:simple>
					</camel:setHeader>
					<camel:bean ref="assemblyInvrptProc"></camel:bean>
					
					<camel:to uri="file:D:\ERP\edioutput\invrpt\?autoCreate=true&amp;tempPrefix=temp&amp;fileName=invrpt_${date:header.invrpt_start_dte:yyyyMMddhhmmss}.edi"></camel:to>
<!-- 					<camel:to uri="sftp://luzhifeng@111.13.52.216?password=Y3-rze4j&amp;autoCreate=true&amp;tempPrefix=temp&amp;fileName=edi/slsrpt_${date:header.start_dte:yyyyMMddhhmmss}.edi"></camel:to> -->
					<camel:log message="invrpt edi text: ${body}"></camel:log>
					
					
					<camel:bean ref="debugProc"></camel:bean>
				</camel:when>
				<camel:otherwise>
					<camel:log message="no retail to process"></camel:log>
				</camel:otherwise>
			</camel:choice>
			
			<camel:bean ref="prepSqlParamInvrptCloseBatchProc"></camel:bean>
			<camel:to uri="sql:{{sql.close_batch}}?dataSourceRef=edi_ds"></camel:to>
			
		</camel:route>
	</camelContext>
</beans>
